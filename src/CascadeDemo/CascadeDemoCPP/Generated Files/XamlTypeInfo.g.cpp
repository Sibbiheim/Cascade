//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "FlyoutExample.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "SettingsFlyoutExample.xaml.h"

#include "FlyoutExample.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "SettingsFlyoutExample.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.Flyout")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.DependencyObject")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Primitives.FlyoutBase")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.FrameworkElement")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Button")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.SettingsFlyout")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.ContentControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"CascadeDemoCPP.FlyoutExample")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Flyout"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::CascadeDemoCPP::FlyoutExample(); 
            };
        return userType;
    }

    if (typeName == L"Sibbiheim.Cascade.FlyoutService")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->AddMemberName(L"Flyout");
        userType->AddMemberName(L"SupportNestedFlyouts");
        userType->AddMemberName(L"SettingsFlyout");
        userType->AddMemberName(L"FlyoutContext");
        return userType;
    }

    if (typeName == L"CascadeDemoCPP.SettingsFlyoutExample")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.SettingsFlyout"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::CascadeDemoCPP::SettingsFlyoutExample(); 
            };
        return userType;
    }

    if (typeName == L"CascadeDemoCPP.MainPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::CascadeDemoCPP::MainPage(); 
            };
        return userType;
    }

    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"Sibbiheim.Cascade.FlyoutService.Flyout")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Flyout", L"Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.FrameworkElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::Sibbiheim::Cascade::FlyoutService::GetFlyout((::Windows::UI::Xaml::FrameworkElement^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::Sibbiheim::Cascade::FlyoutService::SetFlyout((::Windows::UI::Xaml::FrameworkElement^)instance, (::Windows::UI::Xaml::Controls::Primitives::FlyoutBase^)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"Sibbiheim.Cascade.FlyoutService.SupportNestedFlyouts")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SupportNestedFlyouts", L"Boolean");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.Controls.Button");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::Sibbiheim::Cascade::FlyoutService::GetSupportNestedFlyouts((::Windows::UI::Xaml::Controls::Button^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::Sibbiheim::Cascade::FlyoutService::SetSupportNestedFlyouts((::Windows::UI::Xaml::Controls::Button^)instance, (::Platform::Boolean)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"Sibbiheim.Cascade.FlyoutService.SettingsFlyout")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SettingsFlyout", L"Windows.UI.Xaml.Controls.SettingsFlyout");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.FrameworkElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::Sibbiheim::Cascade::FlyoutService::GetSettingsFlyout((::Windows::UI::Xaml::FrameworkElement^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::Sibbiheim::Cascade::FlyoutService::SetSettingsFlyout((::Windows::UI::Xaml::FrameworkElement^)instance, (::Windows::UI::Xaml::Controls::SettingsFlyout^)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"Sibbiheim.Cascade.FlyoutService.FlyoutContext")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FlyoutContext", L"Windows.UI.Xaml.FrameworkElement");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.DependencyObject");
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::Sibbiheim::Cascade::FlyoutService::GetFlyoutContext((::Windows::UI::Xaml::DependencyObject^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::Sibbiheim::Cascade::FlyoutService::SetFlyoutContext((::Windows::UI::Xaml::DependencyObject^)instance, (::Windows::UI::Xaml::FrameworkElement^)value);
            };
        return xamlMember;
    }

    return nullptr;
}

